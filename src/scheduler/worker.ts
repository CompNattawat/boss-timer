// src/scheduler/worker.ts
import 'dotenv/config';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc.js';
import tz from 'dayjs/plugin/timezone.js';
dayjs.extend(utc); dayjs.extend(tz);

import { Worker } from 'bullmq';
import { redis } from './queues.js';
import { prisma } from '../lib/prisma.js';
import { ENV } from '../lib/env.js';
import cronParser from 'cron-parser';
import { scheduleJobs } from '../services/schedule.service.js';
import { client } from '../lib/client.js';
import type { GuildTextBasedChannel } from 'discord.js';

const TZ = ENV.TZ || 'Asia/Bangkok';

/** ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏ó‡∏∏‡∏Å‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö gameId ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ scheduleChannelId ‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß */
async function broadcastToGameGuilds(gameId: string, text: string) {
  // platform='discord' ‡πÅ‡∏•‡∏∞‡∏°‡∏µ scheduleChannelId
  const guilds = await prisma.guild.findMany({
    where: {
      platform: 'discord',
      gameId,
      scheduleChannelId: { not: null },
    },
    select: { scheduleChannelId: true },
  });

  for (const g of guilds) {
    if (!g.scheduleChannelId) continue;
    try {
      const raw = await client.channels.fetch(g.scheduleChannelId);
      const chan = raw as GuildTextBasedChannel | null;
      if (chan && chan.isTextBased()) {
        await chan.send(text);
      }
    } catch (e) {
      console.warn(`[worker] send fail to channel ${g.scheduleChannelId}:`, e);
    }
  }
}

async function start() {
  await client.login(ENV.DISCORD_TOKEN);
  console.log('Worker Discord client logged in');

  // ‚è∞ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î 10 ‡∏ô‡∏≤‡∏ó‡∏µ
  new Worker(
    'alert',
    async job => {
      const { bossId, bossName, nextSpawnISO } = job.data as {
        bossId: string; bossName: string; nextSpawnISO: string;
      };

      const boss = await prisma.boss.findUnique({
        where: { id: bossId },
        select: { gameId: true, nextSpawnAt: true },
      });
      if (!boss) return;

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DB ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô => ‡∏Ç‡πâ‡∏≤‡∏° (‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤)
      if (!boss.nextSpawnAt || dayjs(boss.nextSpawnAt).toISOString() !== dayjs(nextSpawnISO).toISOString()) {
        return;
      }

      const text = `‚è∞ ‡∏≠‡∏µ‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ **${bossName}** ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î (${dayjs(nextSpawnISO).tz(TZ).format('DD/MM/YY HH:mm')})`;
      await broadcastToGameGuilds(boss.gameId, text);
    },
    { connection: redis }
  );

  // üéØ ‡πÅ‡∏à‡πâ‡∏á‡∏ï‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏£‡∏¥‡∏á
  new Worker(
    'spawn',
    async job => {
      const { bossId, bossName, nextSpawnISO } = job.data as {
        bossId: string; bossName: string; nextSpawnISO: string;
      };

      const boss = await prisma.boss.findUnique({
        where: { id: bossId },
        select: { gameId: true, nextSpawnAt: true },
      });
      if (!boss) return;

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DB ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô => ‡∏Ç‡πâ‡∏≤‡∏° (‡∏á‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤)
      if (!boss.nextSpawnAt || dayjs(boss.nextSpawnAt).toISOString() !== dayjs(nextSpawnISO).toISOString()) {
        return;
      }

      const text = `üéØ **${bossName}** ‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (${dayjs(nextSpawnISO).tz(TZ).format('DD/MM/YY HH:mm')})`;
      await broadcastToGameGuilds(boss.gameId, text);

      await prisma.jobLog.updateMany({
        where: { bossId, runAt: new Date(nextSpawnISO), type: 'spawn' },
        data: { status: 'completed' },
      });

      // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÅ‡∏ö‡∏ö loop ‡∏ï‡∏≤‡∏°‡∏Å‡∏¥‡∏•‡∏î‡πå
      // ‡πÄ‡∏ä‡πà‡∏ô updateScheduleForGuild(guildExternalId) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô
    },
    { connection: redis }
  );

  // üß≠ fixed-rule tick: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ cron
  async function tickFixed() {
    const rules = await prisma.fixedRule.findMany({
      where: { enabled: true },
      include: { boss: true, game: true },
    });

    for (const r of rules) {
      try {
        const it = cronParser.parseExpression(r.cron, { tz: r.tz || TZ });
        const next = it.next().toDate();
        if (r.nextPreparedAt && Math.abs(+r.nextPreparedAt - +next) < 30_000) continue;

        await prisma.boss.update({
          where: { id: r.bossId },
          data: { nextSpawnAt: next },
        });

        await scheduleJobs(r.bossId, r.boss.name, next.toISOString());

        await prisma.fixedRule.update({
          where: { id: r.id },
          data: { nextPreparedAt: next },
        });
      } catch (e) {
        console.error('tickFixed error for rule', r.id, e);
      }
    }
  }

  setInterval(tickFixed, 60_000);
  console.log('Worker started (tickFixed every 60s)');
}

start().catch(e => {
  console.error('Worker bootstrap error:', e);
  process.exit(1);
});