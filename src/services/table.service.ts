// src/services/table.service.ts (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πá‡∏ö renderTable ‡∏≠‡∏¢‡∏π‡πà)
import dayjs from 'dayjs';
import tz from 'dayjs/plugin/timezone.js';
import utc from 'dayjs/plugin/utc.js';
import cronParser from 'cron-parser';
import { prisma } from '../lib/prisma.js';

dayjs.extend(utc);
dayjs.extend(tz);

const TZ = 'Asia/Bangkok';

// 0..6 (Sun..Sat) -> Thai short
const TH_DOW = ['‡∏≠‡∏≤.', '‡∏à.', '‡∏≠.', '‡∏û.', '‡∏û‡∏§.', '‡∏®.', '‡∏™.'];

function fmtHM(d: Date | null | undefined) {
  return d ? dayjs(d).tz(TZ).format('HH:mm') : '‚Äî';
}
function fmtDMHM(d: Date | null | undefined) {
  return d ? dayjs(d).tz(TZ).format('DD/MM HH:mm') : '‚Äî';
}
function fmtYMDHM(d: Date | null | undefined) {
  return d ? dayjs(d).tz(TZ).format('YYYY-MM-DD HH:mm') : '‚Äî';
}

function padEndW(s: string, w: number) {
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÑ‡∏ó‡∏¢ (‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ)
  const len = [...s].length;
  return s + ' '.repeat(Math.max(0, w - len));
}

function padStartW(s: string, w: number) {
  const len = [...s].length;
  return ' '.repeat(Math.max(0, w - len)) + s;
}

// ‡πÅ‡∏õ‡∏•‡∏á cron slot (‡πÄ‡∏ä‡πà‡∏ô "0 18 * * 2") -> "‡∏≠. 18:00"
function cronToHuman(cron: string, tzLabel: string = TZ) {
  // ‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏à‡∏≤‡∏Å field 5 (DOW) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô * ‡πÉ‡∏´‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏±‡∏ô
  // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: m h dom mon dow
  const parts = cron.trim().split(/\s+/);
  const minute = parts[0];
  const hour = parts[1];
  const dow = parts[4];

  const hh = String(hour).padStart(2, '0');
  const mm = String(minute).padStart(2, '0');

  if (dow === '*' || dow === '?' || dow === undefined) {
    return `${hh}:${mm}`;
  }

  // ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô "2", "2,4", "2-4" ‚Äî ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢: ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
  const first = String(dow).split(',')[0];
  let dowNum = Number(first);
  // cron ‡∏ö‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ 0=Sun ‡∏´‡∏£‡∏∑‡∏≠ 7=Sun; normalize
  if (dowNum === 7) dowNum = 0;
  const dayText = Number.isInteger(dowNum) ? TH_DOW[dowNum] ?? '' : '';
  return dayText ? `${dayText} ${hh}:${mm}` : `${hh}:${mm}`;
}

export async function renderTable(gameCode: string): Promise<string> {
  const game = await prisma.game.findUnique({ where: { code: gameCode } });
  if (!game) return `‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Å‡∏°‡∏£‡∏´‡∏±‡∏™ **${gameCode}**`;

  // ‡∏î‡∏∂‡∏á‡∏ö‡∏≠‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏Å‡∏° + fixed rules (enabled ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  const bosses = await prisma.boss.findMany({
    where: { gameId: game.id },
    orderBy: { name: 'asc' },
  });
  if (!bosses.length) return `‡πÄ‡∏Å‡∏° **${gameCode}** ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏™ (‡∏•‡∏≠‡∏á /boss add)`;

  const rules = await prisma.fixedRule.findMany({
    where: { gameId: game.id, enabled: true },
    orderBy: { bossId: 'asc' },
  });

  // group rules by bossId
  const rulesByBoss = new Map<string, typeof rules>();
  for (const r of rules) {
    const arr = rulesByBoss.get(r.bossId) ?? [];
    arr.push(r);
    rulesByBoss.set(r.bossId, arr);
  }

  // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÅ‡∏ñ‡∏ß
  type Row = {
    name: string;
    type: 'Daily' | 'Fixed';
    rhText: string;                  // ‡∏ä‡∏°.‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥ (‡∏´‡∏£‡∏∑‡∏≠ ‚Äî)
    lastText: string;               // DD/MM HH:mm ‡∏´‡∏£‡∏∑‡∏≠ ‚Äî
    nextText: string;               // YYYY-MM-DD HH:mm ‡∏´‡∏£‡∏∑‡∏≠ ‚Äî
    fixSlotsText: string;           // "‡∏≠. 18:00, ‡∏û‡∏§. 10:30" ‡∏´‡∏£‡∏∑‡∏≠ ‚Äî
  };

  const now = dayjs();

  const rows: Row[] = [];

  for (const b of bosses) {
    const fixed = rulesByBoss.get(b.id) ?? [];
    const isFixed = fixed.length > 0;

    let type: Row['type'] = isFixed ? 'Fixed' : 'Daily';

    // ‡∏ä‡∏°.‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥
    const rhText = isFixed ? '‚Äî' : (b.respawnHours != null ? String(b.respawnHours) : '‚Äî');

    // ‡πÄ‡∏ß‡∏•‡∏≤ FIX (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) -> ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô human list ‡∏™‡∏±‡πâ‡∏ô ‡πÜ
    const fixSlotsText = isFixed
      ? fixed
          .map(r => cronToHuman(r.cron, r.tz || TZ))
          // ‡πÄ‡∏≠‡∏≤ unique + ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 2‚Äì3 ‡∏ä‡πà‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏û‡∏≠‡∏≠‡πà‡∏≤‡∏ô
          .filter((v, i, a) => a.indexOf(v) === i)
          .slice(0, 3)
          .join(', ') || '‚Äî'
      : '‚Äî';

    // last death
    const lastText = fmtDMHM(b.lastDeathAt);

    // next spawn:
    // - ‡∏ñ‡πâ‡∏≤ Fixed: ‡∏´‡∏≤ next occurrence ‡∏ó‡∏µ‡πà "‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î" ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å cron
    // - ‡∏ñ‡πâ‡∏≤ Daily: ‡πÉ‡∏ä‡πâ nextSpawnAt ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°
    let nextText = '‚Äî';
    if (isFixed) {
      let nearest: Date | null = null;
      for (const r of fixed) {
        try {
          const it = cronParser.parseExpression(r.cron, { tz: r.tz || TZ, currentDate: now.toDate() });
          const n = it.next().toDate();
          if (!nearest || n < nearest) nearest = n;
        } catch {
          // invalid cron ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°
        }
      }
      nextText = fmtYMDHM(nearest);
    } else {
      nextText = fmtYMDHM(b.nextSpawnAt);
    }

    rows.push({
      name: b.name,
      type,
      rhText,
      lastText,
      nextText,
      fixSlotsText,
    });
  }

  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏õ‡πá‡∏ô ‚Äú‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‚Äù ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
  const title = `üìÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ö‡∏≠‡∏™ (${gameCode}) ‚Äî ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ã‡∏ô ${TZ}`;
  const updated = `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${dayjs().tz(TZ).format('DD/MM/YY HH:mm')}`;

  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£, ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡πà‡∏≤‡∏ß ‡πÜ)
  const COLS = {
    name: 16,
    type: 7,        // Daily/Fixed
    rh: 10,         // ‡∏ä‡∏°.‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥
    last: 15,       // ‡∏ï‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    next: 16,       // ‡πÄ‡∏Å‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
    fix: 24,        // ‡πÄ‡∏ß‡∏•‡∏≤ FIX (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  };

  const header =
    padEndW('‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏™', COLS.name) + '  ' +
    padEndW('‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', COLS.type) + '  ' +
    padEndW('‡∏ä‡∏°.‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥', COLS.rh) + '  ' +
    padEndW('‡∏ï‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', COLS.last) + '  ' +
    padEndW('‡πÄ‡∏Å‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ', COLS.next) + '  ' +
    padEndW('‡πÄ‡∏ß‡∏•‡∏≤ FIX (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)', COLS.fix);

  const sep = '‚Äî'.repeat(COLS.name + COLS.type + COLS.rh + COLS.last + COLS.next + COLS.fix + 10);

  const body = rows
    .map(r =>
      padEndW(r.name, COLS.name) + '  ' +
      padEndW(r.type, COLS.type) + '  ' +
      padEndW(r.rhText, COLS.rh) + '  ' +
      padEndW(r.lastText, COLS.last) + '  ' +
      padEndW(r.nextText, COLS.next) + '  ' +
      padEndW(r.fixSlotsText || '‚Äî', COLS.fix)
    )
    .join('\n');

  const notes =
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:\n' +
    '‚Ä¢ Daily = ‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n' +
    '‚Ä¢ Fixed = ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á FIX (cron) ‡∏´‡∏≤‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏ã‡πâ‡∏≥\n' +
    '‚Ä¢ ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‚Äú‡πÄ‡∏ß‡∏•‡∏≤ FIX‚Äù ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≠‡∏ö‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏ñ‡∏±‡∏î‡πÑ‡∏õ 1‚Äì2 ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢';

  return [
    title,
    updated,
    '',
    '```',
    header,
    sep,
    body || '(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏™)',
    sep,
    '```',
    notes,
  ].join('\n');
}