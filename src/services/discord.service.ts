// src/services/discord.service.ts
// ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° type send()
import {
  MessageFlags,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
  GuildTextBasedChannel,
  Client,
  TextBasedChannel, // ‚úÖ
} from 'discord.js';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc.js';
import tz from 'dayjs/plugin/timezone.js';

import { client } from '../lib/client.js';
import { prisma } from '../lib/prisma.js';
import { renderTablesSplit } from './table.service.js';
import { renderScheduleImage } from '../graphics/renderScheduleImage.js';
import { buildScheduleImageInput } from './schedule-image-data.js';

dayjs.extend(utc); dayjs.extend(tz);
const DEFAULT_TZ = 'Asia/Bangkok';

/** ‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ö‡∏ö ‚Äú‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‚Äù ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏´‡∏° */
// ‚úÖ ‡πÉ‡∏ä‡πâ sendWithLimit ‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ + ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ scheduleMessageId ‡πÄ‡∏î‡∏¥‡∏°
export async function postScheduleMessageForGuild(
  guildId: string,
  gameCode: string
): Promise<void> {
  if (!client.isReady()) {
    await new Promise<void>((res) => client.once('ready', () => res()));
  }

  const g = await prisma.guild.findUnique({
    where: { platform_externalId: { platform: 'discord', externalId: guildId } },
  });
  if (!g?.scheduleChannelId) throw new Error(`Guild ${guildId} ‡πÑ‡∏°‡πà‡∏°‡∏µ scheduleChannelId`);

  const raw = await client.channels.fetch(g.scheduleChannelId);
  if (!raw || !raw.isTextBased() || raw.isDMBased()) {
    throw new Error(`Channel ${g?.scheduleChannelId} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text channel`);
  }
  const channel = raw as GuildTextBasedChannel;

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  const { daily, fixed } = await renderTablesSplit(gameCode);
  const dailyMsg = daily.trim();
  const fixedMsg = fixed.trim();

  // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î (ENV > guild > default=combine)
  const mode = resolvePostMode(g as any);

  if (mode === 'combine') {
    const combined = [dailyMsg, fixedMsg].filter(Boolean).join('\n\n');
    if (combined) await sendWithLimit(channel, dailyMsg, `schedule_${gameCode}`);
  } else {
    if (dailyMsg) await sendWithLimit(channel, dailyMsg, `daily_${gameCode}`);
    if (fixedMsg) await sendWithLimit(channel, fixedMsg, `fixed_${gameCode}`);
  }

  // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ
  const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
    new ButtonBuilder().setCustomId(`genimg:${g.id}:${gameCode}`).setLabel('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á').setStyle(ButtonStyle.Primary),
    new ButtonBuilder().setCustomId(`skipimg:${g.id}:${gameCode}`).setLabel('‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á').setStyle(ButtonStyle.Secondary),
  );

  await channel.send({ content: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏´‡∏°?', components: [row] });
}

/** ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô startup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */
// ‚úÖ ‡∏õ‡∏∏‡πà‡∏°: ‡πÉ‡∏ä‡πâ flags (ephemeral) ‡∏ñ‡∏π‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ + ‡∏Å‡∏±‡∏ô InteractionNotReplied
export function registerScheduleImageButtons(c: Client) {
  c.on('interactionCreate', async (i) => {
    if (!i.isButton()) return;
    const [kind, guildId, gameCode] = i.customId.split(':');
    if (kind !== 'genimg' && kind !== 'skipimg') return;
  
    try {
      if (kind === 'skipimg') {
        if (!i.replied && !i.deferred) {
          await i.reply({ content: '‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ', flags: MessageFlags.Ephemeral as number });
        }
        return;
      }
  
      // genimg
      if (!i.replied && !i.deferred) {
        await i.deferReply({ flags: MessageFlags.Ephemeral as number });
      }
  
      const input = await buildScheduleImageInput(gameCode);
      const file = renderScheduleImage(input);
  
      // ‡πÉ‡∏ä‡πâ followUp ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢ defer ‡πÅ‡∏•‡πâ‡∏ß, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô reply
      if (i.deferred) {
        await i.followUp({ files: [file] });
        await i.editReply({ content: '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß', components: [] });
      } else if (!i.replied) {
        await i.reply({ files: [file] });
      }
    } catch (e) {
      // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÄ‡∏Ñ‡∏™ defer ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà error
      if (i.deferred && !i.replied) {
        await i.editReply({ content: '‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' }).catch(() => {});
      }
      console.error('generate schedule image failed:', e);
    }
  });
}

// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å TextBasedChannel + ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 2000
// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å channel ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏ô‡πà ‡πÜ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ .send()
async function sendWithLimit(
  channel: GuildTextBasedChannel,
  content: string,
  filenameHint: string
) {
  if (content.length <= 2000) {
    return channel.send({ content });
  }

  const buf = Buffer.from(content, 'utf8');
  return channel.send({
    content: `üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á (${filenameHint}) ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 2000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô`,
    files: [{ attachment: buf, name: `${filenameHint}.txt` }],
  });
}

// ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å mode ‡∏à‡∏≤‡∏Å ENV / guild / ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
function resolvePostMode(
  g: { schedulePostMode?: string | null } | null
): 'combine' | 'split' {
  const envMode = (process.env.SCHEDULE_POST_MODE || '').toLowerCase();
  const guildMode = (g?.schedulePostMode || '').toLowerCase();
  const m = (guildMode || envMode) as 'combine' | 'split';
  return m === 'split' ? 'split' : 'combine';
}