// src/services/discord.service.ts
// ‚ú® ‡πÄ‡∏û‡∏¥‡πà‡∏° import ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏° type send()
import {
  MessageFlags,
  ButtonBuilder,
  ActionRowBuilder,
  ButtonStyle,
  GuildTextBasedChannel,
  Client,
  TextBasedChannel, // ‚úÖ
} from 'discord.js';
import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc.js';
import tz from 'dayjs/plugin/timezone.js';

import { client } from '../lib/client.js';
import { prisma } from '../lib/prisma.js';
import { renderTablesSplit } from './table.service.js';
import { renderScheduleImage } from '../graphics/renderScheduleImage.js';
import { buildScheduleImageInput } from './schedule-image-data.js';
import crypto from 'node:crypto';

dayjs.extend(utc); dayjs.extend(tz);
const DEFAULT_TZ = 'Asia/Bangkok';

/** ‡∏™‡πà‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ö‡∏ö ‚Äú‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‚Äù ‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏´‡∏° */
// ‚úÖ ‡πÉ‡∏ä‡πâ sendWithLimit ‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ + ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏∞ scheduleMessageId ‡πÄ‡∏î‡∏¥‡∏°
const postingLocks = new Set<string>();
const hashOf = (s: string) => crypto.createHash('sha256').update(s, 'utf8').digest('hex');

export async function postScheduleMessageForGuild(guildId: string, gameCode: string) {
  // 1) mutex
  const lockKey = `${guildId}:${gameCode}`;
  if (postingLocks.has(lockKey)) return;
  postingLocks.add(lockKey);
  try {
    if (!client.isReady()) {
      await new Promise<void>(res => client.once('ready', () => res()));
    }

    const g = await prisma.guild.findUnique({
      where: { platform_externalId: { platform: 'discord', externalId: guildId } },
    });
    if (!g?.scheduleChannelId) throw new Error(`Guild ${guildId} ‡πÑ‡∏°‡πà‡∏°‡∏µ scheduleChannelId`);

    const raw = await client.channels.fetch(g.scheduleChannelId);
    if (!raw || !raw.isTextBased() || raw.isDMBased()) {
      throw new Error(`Channel ${g.scheduleChannelId} ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà text channel`);
    }
    const channel = raw as GuildTextBasedChannel;

    // 2) render & hash
    const { daily, fixed } = await renderTablesSplit(gameCode);
    const combined = [daily.trim(), fixed.trim()].filter(Boolean).join('\n\n');
    if (!combined) return;

    const hash = hashOf(combined);
    // ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏° => ‡∏Ç‡πâ‡∏≤‡∏°
    if ((g as any).scheduleLastHash === hash) return;

    // ‡∏™‡πà‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö >2000 ‡∏ï‡∏±‡∏ß)
    await sendWithLimit(channel as any, combined, `schedule_${gameCode}`);

    // 3) ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå prompt ‡πÄ‡∏Å‡πà‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á prompt ‡πÉ‡∏´‡∏°‡πà
    try {
      const recent = await channel.messages.fetch({ limit: 10 });
      const mine = recent.filter(m =>
        m.author?.id === client.user?.id &&
        m.content?.includes('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏´‡∏°?')
      );
      for (const m of mine.values()) await m.delete().catch(() => {});
    } catch {}

    const row = new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId(`genimg:${g.id}:${gameCode}`).setLabel('‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á').setStyle(ButtonStyle.Primary),
      new ButtonBuilder().setCustomId(`skipimg:${g.id}:${gameCode}`).setLabel('‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á').setStyle(ButtonStyle.Secondary),
    );
    await channel.send({ content: '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏´‡∏°?', components: [row] });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å hash ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    await prisma.guild.update({
      where: { id: g.id },
      data: { scheduleLastHash: hash }, // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô schema
    });
  } finally {
    postingLocks.delete(lockKey);
  }
}

/** ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ô startup ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô */
// startup
export function registerScheduleImageButtons(c: Client) {
  c.on('interactionCreate', async (i) => {
    if (!i.isButton()) return;
    const [kind, guildId, gameCode] = i.customId.split(':');
    if (kind !== 'genimg' && kind !== 'skipimg') return;

    try {
      if (kind === 'skipimg') {
        // ‡∏ñ‡πâ‡∏≤ interaction ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å acknowledge
        if (!i.deferred && !i.replied) {
          await i.reply({ content: '‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ', flags: MessageFlags.Ephemeral as number });
        } else {
          await i.followUp({ content: '‡πÇ‡∏≠‡πÄ‡∏Ñ ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ', flags: MessageFlags.Ephemeral as number });
        }
        return;
      }

      // ‚úÖ genimg
      if (!i.deferred && !i.replied) {
        await i.deferReply({ flags: MessageFlags.Ephemeral as number });
      }

      const input = await buildScheduleImageInput(gameCode);
      const file  = renderScheduleImage(input); // AttachmentBuilder

      if (i.deferred) {
        await i.editReply({ files: [file], content: '‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡πâ‡∏ß' });
      } else if (i.replied) {
        await i.followUp({ files: [file], flags: MessageFlags.Ephemeral as number });
      } else {
        await i.reply({ files: [file], flags: MessageFlags.Ephemeral as number });
      }
    } catch (e) {
      // ‡∏ñ‡πâ‡∏≤ defer ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ editReply; ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á ‡πÉ‡∏´‡πâ reply/followUp
      const msg = '‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      if (i.deferred) await i.editReply({ content: msg }).catch(() => {});
      else if (!i.replied) await i.reply({ content: msg, flags: MessageFlags.Ephemeral as number }).catch(() => {});
      else await i.followUp({ content: msg, flags: MessageFlags.Ephemeral as number }).catch(() => {});
      console.error('generate schedule image failed:', e);
    }
  });
}

// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å TextBasedChannel + ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 2000
// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å channel ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå‡πÅ‡∏ô‡πà ‡πÜ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ .send()
async function sendWithLimit(
  channel: GuildTextBasedChannel,
  content: string,
  filenameHint: string
) {
  if (content.length <= 2000) {
    return channel.send({ content });
  }

  const buf = Buffer.from(content, 'utf8');
  return channel.send({
    content: `üìÑ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á (${filenameHint}) ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 2000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô`,
    files: [{ attachment: buf, name: `${filenameHint}.txt` }],
  });
}

// ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å mode ‡∏à‡∏≤‡∏Å ENV / guild / ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
function resolvePostMode(
  g: { schedulePostMode?: string | null } | null
): 'combine' | 'split' {
  const envMode = (process.env.SCHEDULE_POST_MODE || '').toLowerCase();
  const guildMode = (g?.schedulePostMode || '').toLowerCase();
  const m = (guildMode || envMode) as 'combine' | 'split';
  return m === 'split' ? 'split' : 'combine';
}